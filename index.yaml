openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: work session
  - name: tab
  - name: list
  - name: task
  - name: template
paths:
  /work-sessions:
    post:
      tags:
        - work session
      summary: Create a new work session
      description: Create a new work session to start the session. Store the start time
      operationId: createWorkSession
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewWorkSessionRes'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /work-sessions/{workSessionId}:
    put:
      tags:
        - work session
      summary: Update a work session
      description: Update a work session to end the session. Store the end time.
      operationId: updateWorkSession
      parameters:
        - name: workSessionId
          in: path
          description: id of a work session to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkSessionUpdateRes'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /work-sessions/latest:
    get:
      tags:
        - work session
      summary: Get the latest work session
      description: Get the latest work session wiht null end_at value.
      operationId: getLatestWorkSession
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserInWorkSession'
                  work_session:
                    $ref: '#/components/schemas/WorkSession'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /work-sessions/{workSessionId}/tabs:
    post:
      tags:
        - tab
      summary: Create a new tab
      description: Create a new tab
      operationId: createTab
      parameters:
        - name: workSessionId
          in: path
          description: id of a work session to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - display_order
              type: object
              properties:
                name:
                  type: string
                  example: Write API docs
                display_order:
                  type: number
                  example: 2
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                required:
                  - id
                type: object
                properties:
                  id:
                    type: number
                    example: 10
                  work_session_id:
                    type: number
                    example: 10
                  name:
                    type: string
                    example: Write API docs
                  display_order:
                    type: number
                    example: 2
                  lists:
                    type: array
                    items:
                      $ref: '#/components/schemas/List'
                    example: []
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /work-sessions/{workSessionId}/tabs/{tabId}:
    put:
      tags:
        - tab
      summary: Update a tab
      description: Update a tab
      operationId: updateTab
      parameters:
        - name: workSessionId
          in: path
          description: id of a work session to update
          required: true
          schema:
            type: integer
            format: int64
        - name: tabId
          in: path
          description: id of a tab to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - display_order
              type: object
              properties:
                name:
                  type: string
                  example: Write API docs
                display_order:
                  type: number
                  example: 2
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                required:
                  - id
                type: object
                properties:
                  id:
                    type: number
                    example: 10
                  work_session_id:
                    type: number
                    example: 10
                  name:
                    type: string
                    example: Write API docs
                  display_order:
                    type: number
                    example: 2
                  lists:
                    type: array
                    items:
                      $ref: '#/components/schemas/List'
                    example: []
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - tab
      summary: Delete a tab
      description: Delete a tab
      operationId: deleteTab
      parameters:
        - name: workSessionId
          in: path
          description: id of a work session to update
          required: true
          schema:
            type: integer
            format: int64
        - name: tabId
          in: path
          description: id of a tab to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /work_sessions/{workSessionId}/tabs/{tabId}/lists:
    post:
      tags:
        - list
      summary: Create a new list
      description: Create a new list
      operationId: createList
      parameters:
        - name: workSessionId
          in: path
          description: id of a work session
          required: true
          schema:
            type: integer
            format: int64
        - name: tabId
          in: path
          description: id of a tab
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: On going
                display_order:
                  type: number
                  example: 2
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - tab_id
                  - name
                  - display_order
                properties:
                  id:
                    type: number
                    example: 10
                  tab_id:
                    type: number
                    example: 2
                  name:
                    type: string
                    example: On going
                  display_order:
                    type: number
                    example: 2
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                    example: []
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /work_sessions/{workSessionId}/tabs/{tabId}/lists/{listId}:
    put:
      tags:
        - list
      summary: Update a list
      description: Update a list
      operationId: updateList
      parameters:
        - name: workSessionId
          in: path
          description: id of a work session
          required: true
          schema:
            type: integer
            format: int64
        - name: tabId
          in: path
          description: id of a tab
          required: true
          schema:
            type: integer
            format: int64
        - name: listId
          in: path
          description: id of a list
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Complete
                display_order:
                  type: number
                  example: 2
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - tab_id
                  - name
                  - display_order
                properties:
                  id:
                    type: number
                    example: 10
                  tab_id:
                    type: number
                    example: 2
                  name:
                    type: string
                    example: Complete
                  display_order:
                    type: number
                    example: 2
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                    example: []
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - list
      summary: Delete a list
      description: Delete a list
      operationId: deleteList
      parameters:
        - name: workSessionId
          in: path
          description: id of a work session
          required: true
          schema:
            type: integer
            format: int64
        - name: tabId
          in: path
          description: id of a tab
          required: true
          schema:
            type: integer
            format: int64
        - name: listId
          in: path
          description: id of a list
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /work_sessions/{workSessionId}/tabs/{tabId}/lists/{listId}/tasks:
    post:
      tags:
        - task
      summary: Create a new task
      description: Create a new task
      operationId: createTask
      parameters:
        - name: workSessionId
          in: path
          description: id of a work session
          required: true
          schema:
            type: integer
            format: int64
        - name: tabId
          in: path
          description: id of a tab
          required: true
          schema:
            type: integer
            format: int64
        - name: listId
          in: path
          description: id of a list
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - display_order
              properties:
                name:
                  type: string
                  example: Implement a new feature
                description:
                  type: string
                  example: Implement the nav bar in the dashboard page.
                display_order:
                  type: number
                  example: 2
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - name
                  - display_order
                  - total_time
                properties:
                  id:
                    type: number
                    example: 10
                  name:
                    type: string
                    example: Implement a new feature
                  description:
                    type: string
                    nullable: true
                    example: Implement the nav bar in the dashboard page.
                  display_order:
                    type: number
                    example: 2
                  total_time:
                    type: number
                    example: 0
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    NewWorkSessionRes:
      required:
        - id
        - user_id
        - start_at
      type: object
      properties:
        id:
          type: integer
          example: 10
        user_id:
          type: integer
          example: 10
        start_at:
          type: string
          example: 2023-01-08 04:05:06
        end_at:
          type: string
          example: null
    WorkSessionUpdateRes:
      required:
        - id
        - user_id
        - start_at
        - end_at
      type: object
      properties:
        id:
          type: integer
          example: 10
        user_id:
          type: integer
          example: 10
        start_at:
          type: string
          format: date-time
          example: 2023-01-08 04:05:06
        end_at:
          type: string
          format: date-time
          example: 2023-01-08 10:05:06
    UserInWorkSession:
      type: object
      required:
        - id
      properties:
        id:
          type: number
          example: 10
        image_url:
          type: string
          example: 'https://s3.amazonaws.com/time-tracker/images/users/10/01.png'
    Task:
      required:
        - id
        - list_id
        - name
        - time
      description: time property is the number of seconds. The default value is 0.
      type: object
      properties:
        id:
          type: number
          example: 1
        list_id:
          type: number
          example: 2
        name:
          type: string
          example: Write API docs
        description:
          type: string
          example: Write API documentation of the backend API with Swagger.
        time:
          type: number
          example: 600
    List:
      description: The default value of tasks property is an empty array, not null.
      type: object
      required:
        - id
        - tab_id
        - name
        - display_order
        - tasks
      properties:
        id:
          type: number
          example: 10
        tab_id:
          type: string
          example: 2
        name:
          type: string
          example: On going
        display_order:
          type: number
          example: 2
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    Tab:
      type: object
      properties:
        id:
          type: number
          example: 5
        name:
          type: string
          example: App development
        lists:
          type: array
          items:
            $ref: '#/components/schemas/List'
    WorkSession:
      type: object
      required:
        - id
        - start_at
        - tabs
      properties:
        id:
          type: number
          example: 10
        start_at:
          type: string
          format: date-time
          example: 2023-01-08 10:05:06
        end_at:
          type: string
          format: date-time
          example: null
        tabs:
          type: array
          items:
            $ref: '#/components/schemas/Tab'
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorMessage'
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
          example: 'Error message here.'