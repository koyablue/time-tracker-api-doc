openapi: 3.0.3
info:
  title: TimeTracker backend API doc - OpenAPI 3.0.3
  description: |-
    This is a documentation for the backend API of TimeTracker.
  version: 0.0.1
tags:
  - name: auth
  - name: user
  - name: work session
  - name: tab
  - name: list
  - name: task
  - name: template

paths:
  # auth
  /register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Register a new user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  type: string
                  example: example@example.com
                password:
                  type: string
                  example: password
                password_confirmation:
                  type: string
                  example: password
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
                  email:
                    type: string
                    example: example@example.com
                  token:
                    type: string
                    example: abc1234def
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /email-verification:
    get:
      tags:
        - auth
      summary: E-mail verification
      description: Verify a user's e-mail address by checking token in the query parameter(?token=)
      operationId: verifyUserEmail
      responses:
        '200':
          description: Successful operation
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /login:
    post:
      tags:
        - auth
      summary: User login
      description: User login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: example@example.com
                password:
                  type: string
                  example: abc123def
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: abc123def
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /logout:
    post:
      tags:
        - auth
      summary: User logout
      description: User logout
      responses:
        '200':
          description: Successful operation
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # users
  /users/{userId}:
    get:
      tags:
        - user
      summary: Get a user
      description: Get a user
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/userId'
        - name: templates
          in: query
          description: With the list of templates
          required: false
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  templates:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                          example: 10
                        name:
                          type: string
                          example: Daily routine 1
                        tabs:
                          type: array
                          items:
                            $ref: '#/components/schemas/TabInTemplate'
              examples:
                without parameters:
                  summary: without query params
                  value:
                    email: 'example@example.com'
                with templates=true:
                  summary: with templates=true
                  value:
                    email: 'example@example.com'
                    templates: [
                      {
                      id: 10,
                      name: Daily routine 1,
                      tabs: [
                        {
                          name: 'tab 1',
                          display_order: 2,
                          lists: [
                            {
                              name: 'On going',
                              display_order: 3
                            }
                          ]
                        }
                      ]
                      }
                    ]
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/email-update:
    post:
      tags:
        - user
      summary: Save new e-mail address. Send an e-mail to the user
      description: Save new e-mail address. Send an e-mail to the user
      operationId: updateUserEmail
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  description: new e-mail address
                  example: example@example.com
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/email-update/verification:
    get:
      tags:
        - user
      summary: Verify a user's new e-mail address
      description: Verify a user's new e-mail address by checking token in the query parameter(?token=)
      operationId: verifyUserNewEmail
      responses:
        '200':
          description: Successful operation
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/password-update:
    post:
      tags:
        - user
      summary: Update a user's password
      description: Update a user's password
      operationId: updateUserPassword
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - password_confirmation
              properties:
                password:
                  type: string
                  description: new password
                  example: password
                password_confirmation:
                  type: string
                  description: new password
                  example: password
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/password-update/request:
    post:
      tags:
        - user
      summary: Send a password change email to a user who forgot their password
      description: Send a password change email to a user who forgot their password
      operationId: updateUserPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: example@example.com
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/password-update/verification:
    get:
      tags:
        - user
      summary: Verify the token
      description: Verify the token in the query parameter(?token=)
      operationId: verifyUserNewPassword
      responses:
        '200':
          description: Successful operation
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/password-update/save:
    post:
      tags:
        - user
      summary: Save a user's new password
      description: Save a user's new password
      operationId: saveUserNewPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password
                password_confirmation:
                  type: string
                  example: password
      responses:
        '200':
          description: Successful operation
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # work-sessions
  /users/{userId}/work-sessions:
    post:
      tags:
        - work session
      summary: Create a new work session
      description: Create a new work session
      operationId: createWorkSession
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                template_id:
                  type: number
                  example: 2
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewWorkSessionResWithTemplate'
              examples:
                normal:
                  summary: normal
                  value:
                    {
                      id: 10,
                      user_id: 10,
                      start_at: '2023-01-08 04:05:06',
                      end_at: null
                    }
                with a template:
                  summary: with a template
                  value:
                    {
                      id: 10,
                      user_id: 10,
                      start_at: '2023-01-08 04:05:06',
                      end_at: null,
                      tabs: [
                        {
                          id: 5,
                          name: 'App development',
                          lists: [
                            {
                              id: 10,
                              tab_id: 10,
                              name: 'On going',
                              display_order: 1,
                              tasks: [],
                            }
                          ]
                        }
                      ]
                    }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/work-sessions/{workSessionId}/end:
    put:
      tags:
        - work session
      summary: End a work session
      description: End a work session. Store the end time
      operationId: endWorkSession
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/workSessionId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkSessionUpdateRes'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/work-sessions/latest:
    get:
      tags:
        - work session
      summary: Get the latest work session
      description: Get the latest work session with null end_at value.
      operationId: getLatestWorkSession
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Successful operation. If there is no record, the response is null.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserInWorkSession'
                  work_session:
                    $ref: '#/components/schemas/WorkSession'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # tabs
  /work-sessions/{workSessionId}/tabs:
    post:
      tags:
        - tab
      summary: Create a new tab
      description: Create a new tab
      operationId: createTab
      parameters:
        - $ref: '#/components/parameters/workSessionId'
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - display_order
              type: object
              properties:
                name:
                  type: string
                  example: Write API docs
                display_order:
                  type: number
                  example: 2
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                required:
                  - id
                  - work_session_id
                  - name
                  - display_order
                  - lists
                type: object
                properties:
                  id:
                    type: number
                    example: 10
                  work_session_id:
                    type: number
                    example: 10
                  name:
                    type: string
                    example: Write API docs
                  display_order:
                    type: number
                    example: 2
                  lists:
                    type: array
                    items:
                      $ref: '#/components/schemas/List'
                    example: []
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /work-sessions/{workSessionId}/tabs/{tabId}:
    put:
      tags:
        - tab
      summary: Update a tab
      description: Update a tab
      operationId: updateTab
      parameters:
        - $ref: '#/components/parameters/workSessionId'
        - $ref: '#/components/parameters/tabId'
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
                - display_order
              type: object
              properties:
                name:
                  type: string
                  example: Write API docs
                display_order:
                  type: number
                  example: 2
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                required:
                  - id
                  - work_session_id
                  - name
                  - display_order
                  - lists
                type: object
                properties:
                  id:
                    type: number
                    example: 10
                  work_session_id:
                    type: number
                    example: 10
                  name:
                    type: string
                    example: Write API docs
                  display_order:
                    type: number
                    example: 2
                  lists:
                    type: array
                    items:
                      $ref: '#/components/schemas/List'
                    example: []
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - tab
      summary: Delete a tab
      description: Delete a tab
      operationId: deleteTab
      parameters:
        - $ref: '#/components/parameters/workSessionId'
        - $ref: '#/components/parameters/tabId'
      responses:
        '204':
          description: Successful operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # lists
  /work_sessions/{workSessionId}/tabs/{tabId}/lists:
    post:
      tags:
        - list
      summary: Create a new list
      description: Create a new list
      operationId: createList
      parameters:
      - $ref: '#/components/parameters/workSessionId'
      - $ref: '#/components/parameters/tabId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - display_order
              properties:
                name:
                  type: string
                  example: On going
                display_order:
                  type: number
                  example: 2
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - tab_id
                  - name
                  - display_order
                  - tasks
                properties:
                  id:
                    type: number
                    example: 10
                  tab_id:
                    type: number
                    example: 2
                  name:
                    type: string
                    example: On going
                  display_order:
                    type: number
                    example: 2
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                    example: []
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /work_sessions/{workSessionId}/tabs/{tabId}/lists/{listId}:
    put:
      tags:
        - list
      summary: Update a list
      description: Update a list
      operationId: updateList
      parameters:
        - $ref: '#/components/parameters/workSessionId'
        - $ref: '#/components/parameters/tabId'
        - $ref: '#/components/parameters/listId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - display_order
              properties:
                name:
                  type: string
                  example: Complete
                display_order:
                  type: number
                  example: 2
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - tab_id
                  - name
                  - display_order
                  - tasks
                properties:
                  id:
                    type: number
                    example: 10
                  tab_id:
                    type: number
                    example: 2
                  name:
                    type: string
                    example: Complete
                  display_order:
                    type: number
                    example: 2
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                    example: []
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - list
      summary: Delete a list
      description: Delete a list
      operationId: deleteList
      parameters:
        - $ref: '#/components/parameters/workSessionId'
        - $ref: '#/components/parameters/tabId'
        - $ref: '#/components/parameters/listId'
      responses:
        '204':
          description: Successful operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # tasks
  /work_sessions/{workSessionId}/tabs/{tabId}/lists/{listId}/tasks:
    post:
      tags:
        - task
      summary: Create a new task
      description: Create a new task
      operationId: createTask
      parameters:
        - $ref: '#/components/parameters/workSessionId'
        - $ref: '#/components/parameters/tabId'
        - $ref: '#/components/parameters/listId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - display_order
              properties:
                name:
                  type: string
                  example: Implement a new feature
                description:
                  type: string
                  example: Implement the nav bar in the dashboard page.
                display_order:
                  type: number
                  example: 2
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - name
                  - display_order
                  - total_time
                  - is_active
                properties:
                  id:
                    type: number
                    example: 10
                  name:
                    type: string
                    example: Implement a new feature
                  description:
                    type: string
                    nullable: true
                    example: Implement the nav bar in the dashboard page.
                  display_order:
                    type: number
                    example: 2
                  total_time:
                    type: number
                    example: 0
                  is_active:
                    type: boolean
                    example: false
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /work_sessions/{workSessionId}/tabs/{tabId}/lists/{listId}/tasks/{taskId}:
    put:
      tags:
        - task
      summary: Update a task
      description: Update a task
      operationId: updateTask
      parameters:
        - $ref: '#/components/parameters/workSessionId'
        - $ref: '#/components/parameters/tabId'
        - $ref: '#/components/parameters/listId'
        - $ref: '#/components/parameters/taskId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Implement a new feature
                description:
                  type: string
                  example: Implement the nav bar in the dashboard page.
                display_order:
                  type: number
                  example: 2
                is_active:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - name
                  - display_order
                  - total_time
                  - is_active
                properties:
                  id:
                    type: number
                    example: 10
                  name:
                    type: string
                    example: Implement a new feature
                  description:
                    type: string
                    nullable: true
                    example: Implement the nav bar in the dashboard page.
                  display_order:
                    type: number
                    example: 2
                  total_time:
                    type: number
                    example: 1200
                  is_active:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - task
      summary: Delete a task
      description: Delete a task
      operationId: deleteTask
      parameters:
        - $ref: '#/components/parameters/workSessionId'
        - $ref: '#/components/parameters/tabId'
        - $ref: '#/components/parameters/listId'
        - $ref: '#/components/parameters/taskId'
      responses:
        '204':
          description: Successful operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # templates
  /users/{userId}/templates:
    post:
      tags:
        - template
      summary: Create a new template
      description: Create a new template
      operationId: createTemplate
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - tabs
              properties:
                name:
                  type: string
                  example: Daily routine 1
                tabs:
                  type: array
                  items:
                    $ref: '#/components/schemas/TabInTemplate'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - user_id
                  - name
                  - tabs
                properties:
                  id:
                    type: number
                    example: 1
                  user_id:
                    type: number
                    example: 10
                  name:
                    type: string
                    example: Daily routine 1
                  tabs:
                    type: array
                    items:
                      $ref: '#/components/schemas/TabInTemplate'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/templates/{templateId}:
    delete:
      tags:
        - template
      summary: Delete a template
      description: Delete a template
      operationId: deleteTemplate
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/templateId'
      responses:
        '204':
          description: Successful operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  parameters:
    userId:
      name: userId
      in: path
      description: id of a work session
      required: true
      schema:
        type: integer
        format: int64
    workSessionId:
      name: workSessionId
      in: path
      description: id of a work session
      required: true
      schema:
        type: integer
        format: int64
    tabId:
      name: tabId
      in: path
      description: id of a tab
      required: true
      schema:
        type: integer
        format: int64
    listId:
      name: listId
      in: path
      description: id of a list
      required: true
      schema:
        type: integer
        format: int64
    taskId:
      name: taskId
      in: path
      description: id of a task
      required: true
      schema:
        type: integer
        format: int64
    templateId:
      name: templateId
      in: path
      description: id of a task
      required: true
      schema:
        type: integer
        format: int64
  schemas:
    NewWorkSessionRes:
      required:
        - id
        - user_id
        - start_at
      type: object
      properties:
        id:
          type: integer
          example: 10
        user_id:
          type: integer
          example: 10
        start_at:
          type: string
          example: 2023-01-08 04:05:06
        end_at:
          type: string
          example: null
    NewWorkSessionResWithTemplate:
      type: object
      properties:
        id:
          type: integer
          example: 10
        user_id:
          type: integer
          example: 10
        start_at:
          type: string
          example: 2023-01-08 04:05:06
        end_at:
          type: string
          example: null
        tabs:
          type: array
          items:
            type: object
            required:
              - id
              - name
              - lists
            properties:
              id:
                type: number
                example: 5
              name:
                type: string
                example: App development
              lists:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - tab_id
                    - name
                    - display_order
                    - tasks
                  properties:
                    id:
                      type: number
                      example: 10
                    tab_id:
                      type: string
                      example: 2
                    name:
                      type: string
                      example: On going
                    display_order:
                      type: number
                      example: 2
                    tasks:
                      type: array
                      items:
                        $ref: '#/components/schemas/Task'
                        example: []
    WorkSessionUpdateRes:
      required:
        - id
        - user_id
        - start_at
        - end_at
      type: object
      properties:
        id:
          type: integer
          example: 10
        user_id:
          type: integer
          example: 10
        start_at:
          type: string
          format: date-time
          example: 2023-01-08 04:05:06
        end_at:
          type: string
          format: date-time
          example: 2023-01-08 10:05:06
    UserInWorkSession:
      type: object
      required:
        - id
      properties:
        id:
          type: number
          example: 10
        image_url:
          type: string
          example: 'https://s3.amazonaws.com/time-tracker/images/users/10/01.png'
    Task:
      required:
        - id
        - list_id
        - name
        - time
      description: time property is the number of seconds. The default value is 0.
      type: object
      properties:
        id:
          type: number
          example: 1
        list_id:
          type: number
          example: 2
        name:
          type: string
          example: Write API docs
        description:
          type: string
          example: Write API documentation of the backend API with Swagger.
        time:
          type: number
          example: 600
    List:
      description: The default value of tasks property is an empty array, not null.
      type: object
      required:
        - id
        - tab_id
        - name
        - display_order
        - tasks
      properties:
        id:
          type: number
          example: 10
        tab_id:
          type: number
          example: 2
        name:
          type: string
          example: On going
        display_order:
          type: number
          example: 2
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    Tab:
      type: object
      required:
        - id
        - name
        - lists
      properties:
        id:
          type: number
          example: 5
        name:
          type: string
          example: App development
        lists:
          type: array
          items:
            $ref: '#/components/schemas/List'
    ListInTemplate:
      type: object
      required:
        - name
        - display_order
      properties:
        name:
          type: string
          example: On going
        display_order:
          type: number
          example: 2
    TabInTemplate:
      type: object
      required:
        - name
        - display_order
        - lists
      properties:
        name:
          type: string
          example: tab 1
        display_order:
          type: number
          example: 2
        lists:
          type: array
          items:
            $ref: '#/components/schemas/ListInTemplate'
    WorkSession:
      type: object
      required:
        - id
        - start_at
        - tabs
      properties:
        id:
          type: number
          example: 10
        start_at:
          type: string
          format: date-time
          example: 2023-01-08 10:05:06
        end_at:
          type: string
          format: date-time
          example: null
        tabs:
          type: array
          items:
            $ref: '#/components/schemas/Tab'
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorMessage'
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
          example: 'Error message here.'
    ValidationErrorResponse:
      type: object
      properties:
        fields:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      example:
        fields:
          email:
            - Email is invalid
          password:
            - Password must be at least 8 characters